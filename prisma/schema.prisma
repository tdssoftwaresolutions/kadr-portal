generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id                             String         @id @default(dbgenerated("(uuid())")) @db.Char(36)
  name                           String         @db.VarChar(255)
  email                          String         @unique(map: "email") @db.VarChar(255)
  phone_number                   String?        @db.VarChar(20)
  password_hash                  String         @db.VarChar(255)
  created_at                     DateTime?      @default(now()) @db.Timestamp(0)
  updated_at                     DateTime?      @default(now()) @db.Timestamp(0)
  user_type                      user_user_type @default(CLIENT)
  active                         Boolean        @default(true)
  google_token                   String?        @db.LongText
  city                           String?        @db.VarChar(100)
  state                          String?        @db.VarChar(100)
  pincode                        String?        @db.Char(6)
  is_self_signed_up              Boolean        @default(false)
  llb_college                    String?        @db.VarChar(255)
  llb_university                 String?        @db.VarChar(255)
  llb_year                       Int?           @default(0)
  mediator_course_year           Int?           @default(0)
  mcpc_certificate_url           String?        @db.VarChar(255)
  preferred_area_of_practice     String?        @db.VarChar(255)
  selected_hearing_types         String?        @db.LongText
  bar_enrollment_no              String?        @db.VarChar(255)
  preferred_languages            String?        @db.LongText
  cases_cases_first_partyTouser  cases[]        @relation("cases_first_partyTouser")
  cases_cases_second_partyTouser cases[]        @relation("cases_second_partyTouser")
  cases_cases_mediatorTouser     cases[]        @relation("cases_mediatorTouser")
  events                         events[]
  notes                          notes[]
}

model cases {
  id                            String       @id @default(dbgenerated("(uuid())")) @db.Char(36)
  created_at                    DateTime?    @default(now()) @db.Timestamp(0)
  updated_at                    DateTime?    @default(now()) @db.Timestamp(0)
  mediator                      String?      @db.Char(36)
  first_party                   String?      @db.Char(36)
  second_party                  String?      @db.Char(36)
  caseId                        String?      @db.Char(50)
  evidence_document_url         String?      @db.VarChar(255)
  description                   String?      @db.Text
  category                      String?      @db.VarChar(100)
  case_type                     String?      @db.VarChar(255)
  status                        cases_status @default(New)
  user_cases_first_partyTouser  user?        @relation("cases_first_partyTouser", fields: [first_party], references: [id], onUpdate: Restrict, map: "fk_client_1")
  user_cases_second_partyTouser user?        @relation("cases_second_partyTouser", fields: [second_party], references: [id], onUpdate: Restrict, map: "fk_client_2")
  user_cases_mediatorTouser     user?        @relation("cases_mediatorTouser", fields: [mediator], references: [id], onUpdate: Restrict, map: "fk_mediator")
  events                        events[]

  @@index([mediator], map: "fk_mediator")
  @@index([first_party], map: "fk_first_party")
  @@index([second_party], map: "fk_second_party")
}

model caseIdTracker {
  id         Int @id @default(autoincrement())
  lastCaseId Int
}

model events {
  id                   String      @id @default(dbgenerated("(uuid())")) @db.Char(36)
  title                String      @db.VarChar(255)
  description          String?     @db.Text
  start_datetime       DateTime    @db.DateTime(0)
  end_datetime         DateTime    @db.DateTime(0)
  type                 events_type
  meeting_link         String?     @db.VarChar(255)
  google_calendar_link String?     @db.VarChar(255)
  created_by           String?     @db.Char(36)
  case_id              String?     @db.Char(36)
  created_at           DateTime?   @default(now()) @db.Timestamp(0)
  updated_at           DateTime?   @default(now()) @db.Timestamp(0)
  cases                cases?      @relation(fields: [case_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_case_id")
  user                 user?       @relation(fields: [created_by], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_created_by")

  @@index([case_id], map: "fk_case_id")
  @@index([created_by], map: "fk_created_by")
}

model otp_resets {
  email      String    @id @db.VarChar(255)
  otp        Int?
  created_at DateTime? @default(now()) @db.Timestamp(0)
  expires_at DateTime  @db.Timestamp(0)
}

model available_languages {
  id       String @id @db.VarChar(20)
  language String @db.VarChar(100)
}

model notes {
  id        String    @id @default(dbgenerated("(uuid())")) @db.Char(36)
  user_id   String    @db.Char(36)
  note_text String    @db.Text
  created   DateTime? @default(now()) @db.DateTime(0)
  updated   DateTime? @default(now()) @db.DateTime(0)
  user      user      @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_user_id")

  @@index([user_id], map: "fk_user_id")
}

enum user_user_type {
  ADMIN
  MEDIATOR
  CLIENT
}

enum events_type {
  PERSONAL
  KADR
}

enum cases_status {
  New
  In_Progress         @map("In Progress")
  Closed___Success    @map("Closed - Success")
  Closed___No_Success @map("Closed - No Success")
  Cancelled
  Failed
  Pending
  Escalated
  On_Hold             @map("On Hold")
}

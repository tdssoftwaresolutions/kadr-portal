// ----------------------------------------------------------------------------------------------------
// ScrollMe
// A jQuery plugin for adding simple scrolling effects to web pages
// http://scrollme.nckprsn.com
// ----------------------------------------------------------------------------------------------------
let scrollme = (function (a) { let d = {}; let c = a(document); let b = a(window); d.body_height = 0; d.viewport_height = 0; d.viewport_top = 0; d.viewport_bottom = 0; d.viewport_top_previous = -1; d.elements = []; d.elements_in_view = []; d.property_defaults = { opacity: 1, translatex: 0, translatey: 0, translatez: 0, rotatex: 0, rotatey: 0, rotatez: 0, scale: 1, scalex: 1, scaley: 1, scalez: 1 }; d.scrollme_selector = '.scrollme'; d.animateme_selector = '.animateme'; d.update_interval = 10; d.easing_functions = { linear: function (e) { return e }, easeout: function (e) { return e * e * e }, easein: function (e) { e = 1 - e; return 1 - (e * e * e) }, easeinout: function (e) { if (e < 0.5) { return (4 * e * e * e) } else { e = 1 - e; return 1 - (4 * e * e * e) } } }; d.init_events = ['ready', 'page:load', 'page:change']; d.init_if = function () { return true }; d.init = function () { if (!d.init_if()) { return false }d.init_elements(); d.on_resize(); b.on('resize orientationchange', function () { d.on_resize() }); b.load(function () { setTimeout(function () { d.on_resize() }, 100) }); setInterval(d.update, d.update_interval); return true }; d.init_elements = function () { a(d.scrollme_selector).each(function () { let e = {}; e.element = a(this); let f = []; a(this).find(d.animateme_selector).addBack(d.animateme_selector).each(function () { let h = {}; h.element = a(this); h.when = h.element.data('when'); h.from = h.element.data('from'); h.to = h.element.data('to'); if (h.element.is('[data-crop]')) { h.crop = h.element.data('crop') } else { h.crop = true } if (h.element.is('[data-easing]')) { h.easing = d.easing_functions[h.element.data('easing')] } else { h.easing = d.easing_functions.easeout } let g = {}; if (h.element.is('[data-opacity]')) { g.opacity = h.element.data('opacity') } if (h.element.is('[data-translatex]')) { g.translatex = h.element.data('translatex') } if (h.element.is('[data-translatey]')) { g.translatey = h.element.data('translatey') } if (h.element.is('[data-translatez]')) { g.translatez = h.element.data('translatez') } if (h.element.is('[data-rotatex]')) { g.rotatex = h.element.data('rotatex') } if (h.element.is('[data-rotatey]')) { g.rotatey = h.element.data('rotatey') } if (h.element.is('[data-rotatez]')) { g.rotatez = h.element.data('rotatez') } if (h.element.is('[data-scale]')) { g.scale = h.element.data('scale') } if (h.element.is('[data-scalex]')) { g.scalex = h.element.data('scalex') } if (h.element.is('[data-scaley]')) { g.scaley = h.element.data('scaley') } if (h.element.is('[data-scalez]')) { g.scalez = h.element.data('scalez') }h.properties = g; f.push(h) }); e.effects = f; d.elements.push(e) }) }; d.update = function () { window.requestAnimationFrame(function () { d.update_viewport_position(); if (d.viewport_top_previous != d.viewport_top) { d.update_elements_in_view(); d.animate() }d.viewport_top_previous = d.viewport_top }) }; d.animate = function () { let C = d.elements_in_view.length; for (let A = 0; A < C; A++) { let h = d.elements_in_view[A]; let f = h.effects.length; for (let D = 0; D < f; D++) { let w = h.effects[D]; switch (w.when) { case 'view':case 'span':var r = h.top - d.viewport_height; var n = h.bottom; break; case 'exit':var r = h.bottom - d.viewport_height; var n = h.bottom; break; default:var r = h.top - d.viewport_height; var n = h.top; break } if (w.crop) { if (r < 0) { r = 0 } if (n > (d.body_height - d.viewport_height)) { n = d.body_height - d.viewport_height } } let g = (d.viewport_top - r) / (n - r); let x = w.from; let j = w.to; let o = j - x; let k = (g - x) / o; let v = w.easing(k); let l = d.animate_value(g, v, x, j, w, 'opacity'); let t = d.animate_value(g, v, x, j, w, 'translatey'); let u = d.animate_value(g, v, x, j, w, 'translatex'); let s = d.animate_value(g, v, x, j, w, 'translatez'); let B = d.animate_value(g, v, x, j, w, 'rotatex'); let z = d.animate_value(g, v, x, j, w, 'rotatey'); let y = d.animate_value(g, v, x, j, w, 'rotatez'); let E = d.animate_value(g, v, x, j, w, 'scale'); let q = d.animate_value(g, v, x, j, w, 'scalex'); let p = d.animate_value(g, v, x, j, w, 'scaley'); let m = d.animate_value(g, v, x, j, w, 'scalez'); if ('scale' in w.properties) { q = E; p = E; m = E }w.element.css({ opacity: l, transform: 'translate3d( ' + u + 'px , ' + t + 'px , ' + s + 'px ) rotateX( ' + B + 'deg ) rotateY( ' + z + 'deg ) rotateZ( ' + y + 'deg ) scale3d( ' + q + ' , ' + p + ' , ' + m + ' )' }) } } }; d.animate_value = function (i, h, j, k, n, m) { let g = d.property_defaults[m]; if (!(m in n.properties)) { return g } let e = n.properties[m]; let f = (k > j); if (i < j && f) { return g } if (i > k && f) { return e } if (i > j && !f) { return g } if (i < k && !f) { return e } let l = g + (h * (e - g)); switch (m) { case 'opacity':l = l.toFixed(2); break; case 'translatex':l = l.toFixed(0); break; case 'translatey':l = l.toFixed(0); break; case 'translatez':l = l.toFixed(0); break; case 'rotatex':l = l.toFixed(1); break; case 'rotatey':l = l.toFixed(1); break; case 'rotatez':l = l.toFixed(1); break; case 'scale':l = l.toFixed(3); break; default:break } return l }; d.update_viewport_position = function () { d.viewport_top = b.scrollTop(); d.viewport_bottom = d.viewport_top + d.viewport_height }; d.update_elements_in_view = function () { d.elements_in_view = []; let f = d.elements.length; for (let e = 0; e < f; e++) { if ((d.elements[e].top < d.viewport_bottom) && (d.elements[e].bottom > d.viewport_top)) { d.elements_in_view.push(d.elements[e]) } } }; d.on_resize = function () { d.update_viewport(); d.update_element_heights(); d.update_viewport_position(); d.update_elements_in_view(); d.animate() }; d.update_viewport = function () { d.body_height = c.height(); d.viewport_height = b.height() }; d.update_element_heights = function () { let g = d.elements.length; for (let f = 0; f < g; f++) { let h = d.elements[f].element.outerHeight(); let e = d.elements[f].element.offset(); d.elements[f].height = h; d.elements[f].top = e.top; d.elements[f].bottom = e.top + h } }; c.on(d.init_events.join(' '), function () { d.init() }); return d })(jQuery)
